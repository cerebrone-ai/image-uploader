name: Build, Test, and Push to Docker Hub

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows you to manually trigger 

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Log in to EC2
    - name: Log in to EC2
      env:
        HOST_NAME: ${{ secrets.EC2_HOST }}
        USER_NAME: ${{ secrets.EC2_USER }}
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key
        if ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOST_NAME} 'exit'; then
          echo "Successfully logged into EC2 instance!"
        else
          echo "Failed to log in to EC2 instance. Error code: $?"
          exit 1
        fi

    # Step 3: Set up JDK 17 for Maven build
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # Step 4: Cache Maven dependencies
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # Step 5: Build with Maven
    - name: Build with Maven
      run: mvn clean install

    # Step 6: Run tests with Maven
    - name: Test with Maven
      run: mvn test

    # Step 7: Upload JAR file and Dockerfile as artifacts
    - name: Upload JAR file and Dockerfile
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          target/demo-0.0.1-SNAPSHOT.jar
          Dockerfile

  docker:
    needs: build
    runs-on: ubuntu-latest

    steps:
    # Step 1: Download the artifact from the build job
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts

    # Step 2: List files to check Dockerfile location
    - name: List files
      run: |
        ls -la
        echo "Directory structure:"
        find . -type f

    # Step 3: Check if Docker is installed
    - name: Check Docker installation
      run: docker --version

    # Step 4: Build Docker image
    - name: Build Docker image
      run: docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/my-app:latest .

    